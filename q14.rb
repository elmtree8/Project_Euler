#!/bin/env ruby
# encoding: utf-8
'''
The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?
'''

def longestsequence(max)
	sequences = {1 => 1}
	longestlength = 1
	longestelem = 1
	i = 2
	while i < max
		len = 1
		number = i
		while number > 1
			if number < i
				len = len + sequences[number] - 1
				number = 0
			elsif number % 2 == 0
				number = number / 2
				len += 1
			else
				number = 3 * number + 1
				len += 1
			end
		end
		sequences[i] = len
		if len > longestlength
			longestlength = len
			longestelem = i
		end
		i += 1
	end
	return longestlength, longestelem
end

print "Enter a number: "
max = gets.chomp.to_i
result = longestsequence(max)
puts "The longest sequence is #{result[0]} generated by #{result[1]}"